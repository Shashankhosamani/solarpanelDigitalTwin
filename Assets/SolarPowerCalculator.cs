using System;
using System.Collections;
using System.Collections.Generic; // Ensure this is included
using UnityEngine;
using UnityEngine.Networking;
using SimpleJSON;
using UnityEngine.UI;

public class SolarPowerCalculator : MonoBehaviour
{
    public Text solarPowerText;
    public InputField latitudeInputField;
    public InputField longitudeInputField;
    public Button submitButton;
    public SolarPanel[] solarPanels;
    private float latitude;
    private float longitude;

    void Start()
    {
        // Add listener to the submit button to update latitude, longitude and fetch data
        submitButton.onClick.AddListener(OnSubmit);

        // Initialize latitude and longitude with the input field values
        UpdateLatitude();
        UpdateLongitude();
    }

    public void OnSubmit()
    {
        UpdateLatitude();
        UpdateLongitude();
        StopAllCoroutines(); // Stop any ongoing data fetch routines
        StartCoroutine(UpdateSolarPowerData());
    }

    void UpdateLatitude()
    {
        if (float.TryParse(latitudeInputField.text, out float lat))
        {
            latitude = lat;
        }
        else
        {
            Debug.LogError("Invalid latitude input");
        }
    }

    void UpdateLongitude()
    {
        if (float.TryParse(longitudeInputField.text, out float lon))
        {
            longitude = lon;
        }
        else
        {
            Debug.LogError("Invalid longitude input");
        }
    }

    IEnumerator UpdateSolarPowerData()
    {
        while (true)
        {
            yield return StartCoroutine(GetSolarPowerData(latitude, longitude));
            yield return new WaitForSeconds(3600); // Wait for 1 hour (3600 seconds)
        }
    }

    IEnumerator GetSolarPowerData(float lat, float lon)
    {
        var weatherAPI = new UnityWebRequest($"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current_weather=true&hourly=temperature_2m,relative_humidity_2m,rain,weather_code,cloud_cover,visibility,shortwave_radiation&timezone=auto")
        {
            downloadHandler = new DownloadHandlerBuffer()
        };
        yield return weatherAPI.SendWebRequest();

        if (weatherAPI.isNetworkError || weatherAPI.isHttpError)
        {
            Debug.LogError("Failed to get data");
            yield break;
        }

        JSONNode weatherInfo = JSON.Parse(weatherAPI.downloadHandler.text);
        Debug.Log(weatherInfo);

        // Get the UTC offset from the API response
        int utcOffsetSeconds = weatherInfo["utc_offset_seconds"].AsInt;
        TimeSpan utcOffset = TimeSpan.FromSeconds(utcOffsetSeconds);

        // Get the current UTC time from the API response
        string utcTimeString = weatherInfo["current_weather"]["time"];
        DateTime utcTime = DateTime.Parse(utcTimeString);

        // Convert UTC time to local time using the UTC offset
        DateTime localTime = utcTime;
        int localHour = localTime.Hour;
       
        Debug.Log("UTC Time: " + utcTime);
        Debug.Log("Local Time: " + localTime);
        Debug.Log("Local Hour: " + localHour);

        // Convert the JSONNode to a list of strings
        List<string> hourlyTimes = new List<string>();
        foreach (JSONNode node in weatherInfo["hourly"]["time"])
        {
            hourlyTimes.Add(node.Value);
        }

        // Find the corresponding hourly data index
        int index = hourlyTimes.FindIndex(time => DateTime.Parse(time).Hour == localHour);

        if (index == -1)
        {
            Debug.LogError("No matching hour found in the hourly data");
            yield break;
        }

        float shortwaveRadiation = weatherInfo["hourly"]["shortwave_radiation"][index].AsFloat;

        float totalPowerGenerated = CalculateTotalPower(shortwaveRadiation);
        solarPowerText.text = totalPowerGenerated + " W";

        Debug.Log("Global Horizontal Irradiance (GHI) at hour " + localHour + ": " + shortwaveRadiation + " W/m²");
        Debug.Log("Total Solar Power Generation: " + totalPowerGenerated + " W");
    }

    float CalculateTotalPower(float shortwaveRadiation)
    {
        float totalPower = 0f;
        for (int i = 0; i < solarPanels.Length; i++)
        {
            float panelPower = solarPanels[i].CalculatePower(shortwaveRadiation);
            Debug.Log($"Power generated by panel {i + 1}: {panelPower} W");
            totalPower += panelPower;
        }
        return totalPower;
    }
}
