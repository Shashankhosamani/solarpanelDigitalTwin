using System;
using System.Collections;
using UnityEngine;
using UnityEngine.Networking;
using SimpleJSON;
using UnityEngine.UI;

public class SolarPowerCalculator : MonoBehaviour
{
    public Text solarPowerText;
    public float latitude;
    public float longitude;
    public SolarPanel[] solarPanels;

    void Start()
    {
        StartCoroutine(UpdateSolarPowerData());
    }

    IEnumerator UpdateSolarPowerData()
    {
        while (true)
        {
            yield return StartCoroutine(GetSolarPowerData(latitude, longitude));
            yield return new WaitForSeconds(3600); // Wait for 1 hour (3600 seconds)
        }
    }

    IEnumerator GetSolarPowerData(float lat, float lon)
    {
        var weatherAPI = new UnityWebRequest($"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current=is_day,rain,weather_code,cloud_cover&hourly=temperature_2m,relative_humidity_2m,rain,weather_code,cloud_cover,visibility,shortwave_radiation&timezone=auto&models=best_match")
        {
            downloadHandler = new DownloadHandlerBuffer()
        };
        yield return weatherAPI.SendWebRequest();

        if (weatherAPI.isNetworkError || weatherAPI.isHttpError)
        {
            Debug.LogError("Failed to get data");
            yield break;
        }

        JSONNode weatherInfo = JSON.Parse(weatherAPI.downloadHandler.text);
        int currentHour = DateTime.Now.Hour;
        float shortwaveRadiation = weatherInfo["hourly"]["shortwave_radiation"][currentHour].AsFloat;

        float totalPowerGenerated = CalculateTotalPower(shortwaveRadiation);
        solarPowerText.text = "Total Solar Power Generation: " + totalPowerGenerated + " W";

        Debug.Log("Global Horizontal Irradiance (GHI) at hour " + currentHour + ": " + shortwaveRadiation + " W/m²");
        Debug.Log("Total Solar Power Generation: " + totalPowerGenerated + " W");
    }

    float CalculateTotalPower(float shortwaveRadiation)
    {
        float totalPower = 0f;
        for (int i = 0; i < solarPanels.Length; i++)
        {
            float panelPower = solarPanels[i].CalculatePower(shortwaveRadiation);
            Debug.Log($"Power generated by panel {i + 1}: {panelPower} W");
            totalPower += panelPower;
        }
        return totalPower;
    }
}
